#! /usr/bin/env pinpoint
[text-align=left]
[font=Inconsolata 50px]
[noc.png]
--- [cow.png][text-align=center]
Yet Another
Ansible Introduction


@lukaszproszek
frogu@freenode

Noc Informatyka #9
Kraków, 2015-05-29
--- [no-clue-what-my-job-is.jpg][text-align=center]
about:
System Administrator
Python enthusiast
Ansible evangelist
Strongly believes in Pasta and Beer

---[font=Inconsolata 100px]
Usual intro
---
All you need is 
SSH connection to the remote host

Don't believe the Internets that say
that you need python.

---
You can install it as a first task

ansible 
    all
    -m raw 
    -a "apt-get -qqy install python"
---
Inventory file, simple ini-style:

host1.fqdn
host1 ansible_ssh_host=10.0.0.1
10.0.1.99

---
Invnetory groups:

[group1]
host1
host2

[group2]
...
---
roles/
    role1/
        tasks/main.yml
        handlers/main.yml
        meta/main.yml
        vars/main.yml
        defaults/main.yml
        files/
        templates/
    role2/

---
Variables:

host_vars/host1.fqdn.yml
(group_vars/group/vars.yml)

foo: bar
baz:
    - one
    - two
---
playbooks:
site.yml

hosts:
    - all
roles:
    - webserver
    - { role: auth/users, name: root }

---
http://docs.ansible.com/playbooks_best_practices.html

production        # inventory file for prod
stage             # inventory file for stage
group_vars/
   group1         # here we assign variables
                  # to particular groups
host_vars/
   hostname1      # host specific variables
site.yml          # master playbook
webservers.yml    # playbook for webserver tier
roles/
    common/       # roles
    monitoring/   # 

--- [font=Inconsolata 100px][men-in-black.jpg][text-align=center]
Forget That!
---
Keep your roles separate from your inventory

roles/          # roles repository

environments/   # environment repository
    production/
        prod1/
        prod2/
    staging/
        stage1/
        stage2/
---
A directory is also a file, so we move to:

production/   # inventory DIRECTORY 
    webservers
    cache
    monitoring
    wtf
    omg

---
Keep your group and host vars 
alongside the inventory

environments/
    production/
        prod1/
            inventory
            group_vars/
            host_vars/

---
specify the environment during runtime

ansible-playbook -i \
    environments/production/prod1/inventory

(or make an alias for that)

This way you will not run a playbook 
on a wrong evironment

---
Don't keep playbooks in the main directory.
Use a tree structure:

plays/
    monitoring/
        set_up_wtf_mon.yml
    deploy/
        application1.yml
    security/
        add_ssh_user.yml

---
Add an environment variable
pointing to the roles' root dir.

export ANSIBLE_ROLES_PATH=\
    ~/git/orchestration/roles

That way your playbooks will 
always see roles that they use.

---
change the default dictionary
update policy.

Default: overwrite

"better": 
hash_behaviour=merge
---
vars precendence:

» role/defaults
» group_vars 
» host_vars
» role/vars 
» {role: foo, var: bar}
» playbook vars
» --extra-vars="var=bar"
» vars/
» role dependencies
» facts
» register variables

https://github.com/cookrn/ansible_variable_precedence
---
Use vault! 

group_vars/all/database.yml
db:
    server: dbserver1
    sid: prod
    port: 1521

ansible-vault edit 
    group_vars/all/vault.yml

db:
    root:
        password: 8.apud

---
templates (jinja):
etc_hosts.j2

{{ ansible_default_ipv4.address }} 
    {{ ansible_hostname }} 
    {{ ansible.fqdn }]
    {{ inventory_hostname }}
    {{ inventory_hostname.short }}

---
filters

{{ my_var|upper }}

{{ registered_var|changed }}

{{ other_var|lower|rot13 }}

---

Don't be afraid of writing
your own jinja filters.

It's really simple.
---
export  
    ANSIBLE_FILTER_PLUGINS=
        ~/git/orchestration/
        plugins/filter_plugins

---
\# rot13.py
def enc_rot13( s ):
  return s.encode('rot13')

class FilterModule( object ):
  def filters( self ):
    return {
        'rot13' : enc_rot13
    }

---[text-align=center]

Ansible is 
easily extensible.

Write your own modules!

---
Arguments are passed as a file.
# we have to read that file in
with open(sys.argv[1]) as f:
    args=f.read()

---
split that into a list
args = args.split()
---
intelligently split 
that string into a list

args = shlex.split( args )

---
Key, value pairs would be nice

args = [ 
    x.split( '=', 1 ) 
    for z in args ]

args = {
    k: v 
    for k, v in args }

---
Modules return nothing. 
They print json to stdout.

print json.dumps({
    'changed': True,
    'foo': 'bar'
})

ONLY dictionaries!
---
Modules can suplement 
default facts 
known about the node

just add the 'ansible_facts' key
to json
---
{
    "changed": True,
    "ansible_facts" : {
        "hack_time": {
            "ready": True
        }
    }
}
---
Now that we know how it is done...

--- [font=Inconsolata 100px][men-in-black.jpg][text-align=center]
Forget That!
too cumbersome...

---
from ansible.module_utils.basic import *

module = AnsibleModule(
    argument_spec= {
        supports_check_mode: False,
        state: {
            default:'present',
            choices: [
                'present', 
                'absent'
                ]
        },
        foo: bar
    }
)
---
\# exit helpers
module.exit_json(
    changed=True, 
    noc='informatyka'
    )

module.fail_json(
    msg="it's a trap"
    )
---
Our first module
from ansible.module_utils.basic \
    import *
module = AnsibleModule(
    argument_spec={}   )
def main():
    module.exit_json(
        changed=False,
        noc='informatyka'
        )
main()
---
 ansible/hacking/test-module -m noc
***********************************
RAW OUTPUT
{"changed": false, "noc": "informatyka"}

PARSED OUTPUT
{
        "changed": false, 
        "noc": "informatyka"
}
---
but modules DO NOT have to be python

\#!/bin/bash
\# sudo rm -rf /
echo '{ "changed": false, "noc": "informatyka" }'

---
ansible/hacking/test-module -m noc2 

***********************************
RAW OUTPUT
{ "changed": false, "noc": "informatyka" }


***********************************
PARSED OUTPUT
{
        "changed": false, 
        "noc": "informatyka"
}

--- 
Don't write big monolithic roles.
Carveout simpler roles 
and use role dependencies.

\# ttrss/meta/main.yml
dependencies:
    - { role: services/mariadb, user: ttrss }

---  [top] [font=Monospace 150px]
QUESTIONS?

---  [top-right] [fill][font=Monospace 100px] 
THE
END
